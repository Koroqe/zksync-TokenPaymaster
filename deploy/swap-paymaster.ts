import { Provider, utils, Wallet } from "zksync-web3";
import * as ethers from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";

// Put the address of the deployed paymaster here
const PAYMASTER_ADDRESS = "0xb8125d071083E3487bEA95e702318924e7DcC936";

const ROUTER_ADDRESS = "0xB3b7fCbb8Db37bC6f572634299A58f51622A847e";
const tokenToBuy = "0x26C78bD5901f57DA8aa5CF060aB2116d26906B5E"; // TEST token

export default async function (hre: HardhatRuntimeEnvironment) {
  const provider = new Provider("https://testnet.era.zksync.dev");
  const wallet = new Wallet(process.env.WALLET_PRIVATE_KEY!, provider);


  const router = new ethers.Contract(ROUTER_ADDRESS, require('./abi/Router.json'), wallet);
  const token = new ethers.Contract(tokenToBuy, hre.artifacts.readArtifactSync("MyERC20").abi, wallet);


  // const tx = await token.approve(router.address, ethers.constants.MaxUint256);
  // console.log(tx.hash);

  if (false) {
    // fund paymaster
    const tx = await wallet.sendTransaction({
      to: PAYMASTER_ADDRESS,
      value: ethers.utils.parseEther('0.05'),
    });
    console.log(tx.hash);
  }

  const paymasterParams = utils.getPaymasterParams(PAYMASTER_ADDRESS, {
    type: "ApprovalBased",
    token: token.address,
    // set minimalAllowance as we defined in the paymaster contract
    minimalAllowance: ethers.BigNumber.from(1),
    // empty bytes as testnet paymaster does not use innerInput
    innerInput: Uint8Array.from('0x1234'.slice(2).match(/.{1,2}/g)!.map((hex) => parseInt(hex, 16))),
  });

  // console.log(paymasterParams);

  const tx = await wallet.sendTransaction({
    to: ROUTER_ADDRESS,
    value: 0,
    gasLimit: 1000000,
    data: '0x2cc4081e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000007b5741a1bb1ff757d40000000000000000000000000000000000000000000000000000000064fe176f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000026c78bd5901f57da8aa5cf060ab2116d26906b5e0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000088732c31898ec0f69f69cbc76b14607dcaa4b5ea000000000000000000000000000000000000000000000000000000000000008000000000000000000000000073053ab5530f513d4f971b5e6ff33381cdc61c700000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000006000000000000000000000000026c78bd5901f57da8aa5cf060ab2116d26906b5e00000000000000000000000076497e881171b896eb12d63426db2db2e67d04590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076497e881171b896eb12d63426db2db2e67d0459000000000000000000000000000000000000000000000000000000000000008000000000000000000000000073053ab5530f513d4f971b5e6ff33381cdc61c70000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000600000000000000000000000003e7676937a7e96cfb7616f255b9ad9ff47363d4b00000000000000000000000047f5e8980ad2a681ee9d425338ce14dd92be4f3c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047f5e8980ad2a681ee9d425338ce14dd92be4f3c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000073053ab5530f513d4f971b5e6ff33381cdc61c70000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000bfce1d53451b4a8175dd94e6e029f7d8a701e9c0000000000000000000000004bb20eee4d1101b086882774cbf811423528f24300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000',
    // gasPrice: 0,
    customData: {
      gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,
      paymasterParams: paymasterParams,
    },
  });
  console.log(tx.hash);

  // const tx = await provider.getTransaction('0x7af716e5daf432f569e04288443632d37c2298b3ea3fae7d7ef40b41ff3b3de1');
  // console.log(tx);



  // const func = router.interface.functions['swap(((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256)'];
  // const func = router.interface.functions['swapWithPermit(((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))'];

  // console.log(router.interface.decodeFunctionData(func, tx.data));

  // iface.decodeFunctionData('swapExactETHForTokens', '0x7ff36ab50000000000000000000000000000000000000000000000bc18ba4144048bbab00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c0c5eb43e2df059e3be6e4fb0284c283caa5991900000000000000000000000000000000000000000000000000000000614d87a80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000008ba0619b1e7a582e0bce5bbe9843322c954c340')
 
}
